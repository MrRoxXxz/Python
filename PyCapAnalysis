import pyshark
import matplotlib.pyplot as plt
import docx

# function to analyze the PCAP file
def analyze_pcap(filepath, ip_range):
    # create a pyshark capture object
    cap = pyshark.FileCapture(filepath)

    # initialize variables to store protocol and IP information
    protocols = {}
    ip_addresses = []

    # iterate through each packet in the capture
    for packet in cap:
        # extract the protocol information
        protocol = packet.transport_layer
        if protocol in protocols:
            protocols[protocol] += 1
        else:
            protocols[protocol] = 1

        # extract the IP information
        ip_address = packet.ip.src
        if ip_address not in ip_addresses:
            ip_addresses.append(ip_address)

    # filter the IP addresses that do not match the specified range
    filtered_ips = [ip for ip in ip_addresses if not ip_range[0] <= ip <= ip_range[1]]

    # create a graph to display the protocol information
    plt.bar(protocols.keys(), protocols.values())
    plt.show()

    # write the data to a docx file
    doc = docx.Document()
    doc.add_paragraph("Protocols:")
    for key, value in protocols.items():
        doc.add_paragraph(f"{key}: {value}")
    doc.add_paragraph("IP Addresses:")
    for ip in ip_addresses:
        doc.add_paragraph(ip)
    doc.add_paragraph("Filtered IP Addresses:")
    for ip in filtered_ips:
        doc.add_paragraph(ip)
    doc.save("output.docx")

# example usage of the function
analyze_pcap("example.pcap", ("192.168.1.0", "192.168.1.255"))
